#!/usr/bin/env nu

def main [] {}

#-------------------------------------------------------------------------------
# HYPRLAND

alias hc = hyprctl
alias dis = hc dispatch

const WS_COUNT = 4

def "main up" [] {
    let ws = get_workspace
    let n = $ws.id | into int
    let min =  ($ws.monitorID | into int) * $WS_COUNT + 1
    if $n > $min {
        dis workspace "-1"
    }
}

def "main down" [] {
    let ws = get_workspace
    let n = $ws.id | into int
    let max =  (($ws.monitorID | into int) + 1) * $WS_COUNT
    if $n < $max {
        dis workspace "+1"
    }
}

# `n` is a 1-based index
# TODO: check that n is within 1..$WS_COUNT
def "main ws" [n: int] {
    let ws = get_workspace
    let start = ($ws.monitorID | into int) * $WS_COUNT
    let id = $start + $n
    dis workspace $id
}

def "main move-to-ws" [n: int] {
    let ws = get_workspace
    let start = ($ws.monitorID | into int) * $WS_COUNT
    let id = $start + $n
    dis movetoworkspace $id
}

def "main info" [] {
    # Send notifications with no expiry time. They will appear in reverse order.
    notify-send --expire-time=0 (hc activewindow | str trim)
    notify-send --expire-time=0 (hc activeworkspace | str trim)
}

def get_workspace [] {
    hc activeworkspace -j | from json
}

#-------------------------------------------------------------------------------
# NIRI

def "main bookmarks" [] {
    let w = ni get "menu"
    if $w != null {
        niri msg action close-window --id $w.id
    } else {
        wezterm --config font_size=13 start --class menu -e ~/dot/bin/bm
    }
}

def ni [] {}

# List workspaces
def "ni workspaces" [] {
    ni msg workspaces
}

# List windows
def "ni windows" [] {
    ni msg windows
}

# Get the focused window
def "ni focused-window" [] {
    ni msg focused-window
}

# Get the focused output
def "ni focused-output" [] {
    ni msg focused-output
}

# Get the first window with the given app ID
def "ni get" [app_id: string] {
    let ws = ni windows | where app_id == $app_id
    if ($ws | is-not-empty) {
        $ws | first
    } else {
        null
    }
}

def "ni msg" [cmd: string] {
    niri msg --json $cmd | from json
}
